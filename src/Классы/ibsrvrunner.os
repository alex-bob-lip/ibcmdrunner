// BSLLS:LatinAndCyrillicSymbolInWord-off

#Использовать v8find
#Использовать 1commands
#Использовать asserts
#Использовать fs

#Область ОписаниеПеременных

Перем Лог; // Экземпляр логгера
Перем ПутьКIbsrv; // Путь к утилите ibsrv
Перем ПараметрыЗапускаАС; // Коллекция параметров командной строки  

Перем Процесс; // Процесс запущенного автономного сервера

Перем Версия; // Версия платформы, используемая утилитой
Перем КаталогДанных; // Каталог данных автономного сервера

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Текущая версия утилиты ibsrv
//
//  Возвращаемое значение:
//   Строка - версия утилиты
//
Функция Версия() Экспорт
	
	Если Версия = "8.3" Тогда
		ВычислитьВерсиюIbsrv(Версия, Неопределено);
	КонецЕсли;
	
	Возврат Версия;

КонецФункции

// Устанавливает версию платформы, которая будет использована для запуска утилиты ibsrv
//
// Параметры:
//   НомерВерсии - Строка - номер версии в формате 8.3.13.1341 (допустимо указание 8.3, 8.3.13)
//   Разрядность - Строка, Неопределено - разрядность требуемой версии (перечисление из РазрядностьПлатформы)
//
Процедура УстановитьВерсиюПлатформы(Знач НомерВерсии, Знач Разрядность = Неопределено) Экспорт
	
	Ожидаем.Что(НомерВерсии).ИмеетТип("Строка");
	Если Разрядность <> Неопределено Тогда
		Ожидаем.Что(Разрядность).ИмеетТип("Строка");
	КонецЕсли;

	ВычислитьВерсиюIbsrv(НомерВерсии, Разрядность);

КонецПроцедуры

// Устанавливает путь к каталогу данных автономного сервера.
//
// Параметры:
//   КаталогДанныхСервера - Строка - Путь к каталогу данных сервера.
//
Процедура УстановитьКаталогДанных(Знач КаталогДанныхСервера) Экспорт

	Ожидаем.Что(КаталогДанныхСервера).ИмеетТип("Строка");
	Ожидаем.Что(ФС.КаталогСуществует(КаталогДанныхСервера)).ЭтоИстина();

	КаталогДанных = КаталогДанныхСервера;
	ПараметрыЗапускаАС.Вставить("data", ОбернутьВКавычки(КаталогДанных));

КонецПроцедуры

// Устанавливает параметры доступа к файловой базе данных.
//
// Параметры:
//   КаталогИБ - Строка - Путь к каталогу файловой базы данных «1С:Предприятия».
//
Процедура УстановитьПараметрыФайловойИБ(Знач КаталогИБ) Экспорт

	Ожидаем.Что(КаталогИБ).ИмеетТип("Строка");
	Ожидаем.Что(ФС.КаталогСуществует(КаталогИБ)).ЭтоИстина();

	ПараметрыЗапускаАС.Вставить("db-path", ОбернутьВКавычки(КаталогИБ));
   
КонецПроцедуры

// Устанавливает путь к конфигурационному файлу автономного сервера.
//
// Параметры:
//   ПутьККонфигурационномуФайлу - Строка - Путь к конфигурационному файлу.
//
Процедура УстановитьКонфигурационныйФайл(Знач ПутьККонфигурационномуФайлу) Экспорт
	
	Ожидаем.Что(ПутьККонфигурационномуФайлу).ИмеетТип("Строка");
	Ожидаем.Что(ФС.ФайлСуществует(ПутьККонфигурационномуФайлу)).ЭтоИстина();

	ПараметрыЗапускаАС.Вставить("config", ОбернутьВКавычки(ПутьККонфигурационномуФайлу));

КонецПроцедуры

// Установить порт установки прямого соединения с сервером.
//
// Параметры:
//   НомерПорта - Число - порт установки прямого соединения с сервером (от 1000 до 65535)
//
Процедура УстановитьПортПрямогоДоступа(Знач НомерПорта) Экспорт
	
	Ожидаем.Что(НомерПорта).ИмеетТип("Число");
	Ожидаем.Что(НомерПорта).Больше(1000); // BSLLS:MagicNumber-off
	Ожидаем.Что(НомерПорта).Меньше(65535); // BSLLS:MagicNumber-off

	ПараметрыЗапускаАС.Вставить("direct-regport", НомерПорта);

КонецПроцедуры

// Установить порт установки http-соединения с сервером.
//
// Параметры:
//   НомерПорта - Число - порт установки http соединения с сервером (от 1000 до 65535)
//
Процедура УстановитьПортHttpДоступа(Знач НомерПорта) Экспорт
	
	Ожидаем.Что(НомерПорта).ИмеетТип("Число");
	Ожидаем.Что(НомерПорта).Больше(1000); // BSLLS:MagicNumber-off
	Ожидаем.Что(НомерПорта).Меньше(65535); // BSLLS:MagicNumber-off

	ПараметрыЗапускаАС.Вставить("http-port", НомерПорта);

КонецПроцедуры

// Выполняет запуск автономного сервера. При ошибке запуска вызывается исключение, которео можно проверить
// методом см. ЭтоИсключенияЗапускаАС
//
Процедура Запустить() Экспорт

	Если Запущен() Тогда
		ВызватьИсключение "Процесс ibsrv уже запущен!";
	КонецЕсли;

	Ожидаем.Что(КаталогДанных).Заполнено();

	ПараметрыКоманды = ЗаполнитьПараметрыКоманды();
	ЗапуститьПроцессIbsrv(ПараметрыКоманды);

	ОжидатьЗапускаIbsrv();

	Лог.Отладка("Процесс %1 ibsrv запущен с параметрами %2", Процесс.Идентификатор, СтрСоединить(ПараметрыКоманды));

КонецПроцедуры

// Проверяет, что исключение было вызвано программно при запуске автономного сервера.
//
// Параметры:
//   ИнформацияОбОшибке - ИнформацияОбОшибке - Описание ошибки проверяемого исключения
//
//  Возвращаемое значение:
//   Булево - Истина, если это исключение запуска автономного сервера
//
Функция ЭтоИсключенияЗапускаАС(ИнформацияОбОшибке) Экспорт

	Возврат СтрНайти(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ТекстИсключенияЗапускаАС()) > 0;

КонецФункции

// Проверяет запущен ли процесс автономного сервера
//
//  Возвращаемое значение:
//   Булево - Истина - если процесс запущен, Ложь - в остальных случаях
//
Функция Запущен() Экспорт

	Если Процесс = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Не Процесс.Завершен;
	КонецЕсли;

КонецФункции

// Останавливает запущенный автономный сервер.
//
Процедура Остановить() Экспорт

	Если Не Запущен() Тогда
		Возврат;
	КонецЕсли;
	
	Процесс.Завершить();

	ПрочитатьПотокиIbsrv();
	
	Лог.Отладка("Процесс %1 ibsrv завершен.", Процесс.Идентификатор);
	
	Процесс = Неопределено;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта()

	Версия = "8.3";
	Лог = Логирование.ПолучитьЛог(ИмяЛога());
	ПараметрыЗапускаАС = Новый Соответствие;
	КаталогДанных = "";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяЛога()
	Возврат "oscript.lib.ibcmdrunner";
КонецФункции

Функция ОбернутьВКавычки(Строка)
	Возврат СтрШаблон("""%1""", Строка);
КонецФункции

Процедура ВычислитьВерсиюIbsrv(НомерВерсии, Разрядность)

	ПутьКIbsrv = Платформа1С.ПутьКIBSRV(НомерВерсии, Разрядность);
	Ожидаем.Что(ПутьКIbsrv, "Не найдена установленная версия платформы: " + НомерВерсии).Заполнено();
	
	ПараметрыКоманды = Новый Массив;
	ПараметрыКоманды.Добавить("--version");
	
	ВыводКоманды = ВыполнитьКомандуIbsrv(ПараметрыКоманды);
		
	Версия = СокрЛП(ВыводКоманды);	

КонецПроцедуры

Функция ВыполнитьКомандуIbsrv(ПараметрыКоманды)

	Команда = Новый Команда();
	Команда.УстановитьКоманду(ПутьКIbsrv);
	Команда.ДобавитьПараметры(ПараметрыКоманды);
	Команда.УстановитьИсполнениеЧерезКомандыСистемы(Ложь);
	Команда.УстановитьКодировкуВывода(КодировкаТекста.UTF8);
	Команда.УстановитьПравильныйКодВозврата(0);

	Команда.Исполнить();

	Возврат Команда.ПолучитьВывод();

КонецФункции

Функция ЗапуститьПроцессIbsrv(Знач ПараметрыКоманды) 
	
	ПараметрыКоманды.Вставить(0, ОбернутьВКавычки(ПутьКIbsrv));

	КоманднаяСтрока = СтрСоединить(ПараметрыКоманды, " ");
	ТекущийКаталог = КаталогДанных;
	ПеренаправлятьПотокВывода = Истина;
	ПеренаправлятьПотокВвода = Ложь;
	КодировкаПотоков = КодировкаТекста.UTF8;

	Процесс = СоздатьПроцесс(КоманднаяСтрока, ТекущийКаталог, 
		ПеренаправлятьПотокВывода, ПеренаправлятьПотокВвода, КодировкаПотоков);
	Процесс.Запустить();
	
	Возврат Процесс;

КонецФункции

Процедура ОжидатьЗапускаIbsrv()

	ИнтервалПроверкиМс = 500; // 0.5 сек
	ПредельныйПериодОжиданияМс = 10000; // 10 сек
	ТекущийПериодОжидания = 0;
	ФайлСуществует = Ложь;
	ИмяФайла = ОбъединитьПути(КаталогДанных, "lock.pid");
	ЕстьДанные = Ложь;

	Пока Запущен() И ТекущийПериодОжидания < ПредельныйПериодОжиданияМс Цикл 
		Приостановить(ИнтервалПроверкиМс);

		ЕстьДанные = ЕстьДанные ИЛИ ПрочитатьПотокиIbsrv();
		ФайлСуществует = ФайлСуществует ИЛИ ФС.ФайлСуществует(ИмяФайла);

		Если ЕстьДанные И ФайлСуществует Тогда
		 	Прервать;
		КонецЕсли;		

		ТекущийПериодОжидания = ТекущийПериодОжидания + ИнтервалПроверкиМс;

	КонецЦикла;

	Если ФайлСуществует Тогда
		Возврат;
	КонецЕсли;

	Если Запущен() Тогда
		Остановить();
	КонецЕсли;

	ВызватьИсключение ТекстИсключенияЗапускаАС();
	 	
КонецПроцедуры

Функция ТекстИсключенияЗапускаАС()

	Возврат "Процесс ibsrv не запустился!";

КонецФункции

Функция ЗаполнитьПараметрыКоманды()
	
	ПараметрыКоманды = Новый Массив;

	Для Каждого КлючИЗначение Из ПараметрыЗапускаАС Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда // это параметр-флаг
			ПараметрыКоманды.Добавить(КлючИЗначение.Ключ);	
			Продолжить;

		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Строка") И ПустаяСтрока(КлючИЗначение.Значение) Тогда
			Продолжить;	
		
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Булево") Тогда
			Значение = ?(КлючИЗначение.Значение, "allow", "deny");

		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Число") Тогда
			Значение = XMLСтрока(КлючИЗначение.Значение);
		
		Иначе
			Значение = КлючИЗначение.Значение;

		КонецЕсли;
		
		ПараметрЗапуска = СтрШаблон("--%1=%2", КлючИЗначение.Ключ, Значение);
		ПараметрыКоманды.Добавить(ПараметрЗапуска);	
	
	КонецЦикла;

	Возврат ПараметрыКоманды;

КонецФункции

Функция ПрочитатьПотокиIbsrv() 

	ЕстьДанные = Ложь;

	Пока Процесс.ПотокВывода.ЕстьДанные Цикл
		СтрокаВывода = Процесс.ПотокВывода.ПрочитатьСтроку();
		Если ЗначениеЗаполнено(СтрокаВывода) Тогда
			Лог.Отладка(СтрокаВывода);
			ЕстьДанные = Истина;
		КонецЕсли;
	КонецЦикла;

	Пока Процесс.ПотокОшибок.ЕстьДанные Цикл
		СтрокаОшибки = Процесс.ПотокОшибок.ПрочитатьСтроку();
		Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
			Лог.Ошибка(СтрокаОшибки);
			ЕстьДанные = Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат ЕстьДанные;

КонецФункции

#КонецОбласти
