
// BSLLS:LatinAndCyrillicSymbolInWord-off

#Использовать logos
#Использовать v8find
#Использовать asserts
#Использовать 1commands 
#Область ОписаниеПеременных

Перем Лог; 
Перем ПутьКПриложению;          // Строка - путь к приложению ibcmd
Перем ЭтоWindows;               // Булево - Это ОС Windows

Перем ПараметрыЗапуска;         // Массив параметров запуска команды
Перем ПараметрыСервернойИБ;     // Массив параметров серверной информационной базы 
Перем ПараметрыКонфигурацииАС;  // Массив параметров конфигурационного файла автономного сервера
Перем ПараметрыФайловойИБ;      // Массив параметров файловой информационной базы
Перем ПараметрыАвторизацииИБ;   // Массив параметров авторизации информационной базы
Перем ПараметрыАвтономногоСервера; // Массив параметров автономного сервера
Перем ПеременныеСредыКоманды;   // Соответствие - переменные среды команды
       
Перем Версия;                   // Версия платформы 1С
Перем Команда;                  // Команда исполнения вызова ibcmd

#КонецОбласти

#Область ПрограммныйИнтерфейс

// #Область Методы, доступные для версии платформы 1С > чем 8.3.20

// СнятьСПоддержки
//      Снимает с поддержки конфигурацию
// Параметры:
//  
// Возвращаемое значение:
//
Процедура СнятьСПоддержки() Экспорт
    
    Ожидаем.Что(СравнитьВерсии(Версия, "8.3.20") > 0, "Версия платформы 1С должна быть старше, чем 8.3.20").ЭтоИстина();
    НачатьЗаполнениеПараметровЗапуска("infobase config support disable");
       
    ВыполнитьКоманду();

КонецПроцедуры

// ТестированиеИИсправление
//      Проводит тестирование и исправление информационной базы
// Параметры:
//   ЗавершитьОперацию - Булево - завершить незавершенную операцию.
//   ВосстановитьМетаданные - Булево - выполнить восстановление структуры метаданных конфигурации.
//  
// Возвращаемое значение:
//
Процедура ТестированиеИИсправление(
    Знач ЗавершитьОперацию,
    Знач ВосстановитьМетаданные
    ) Экспорт
    
    Ожидаем.Что(СравнитьВерсии(Версия, "8.3.20") > 0, "Версия платформы 1С должна быть старше, чем 8.3.20").ЭтоИстина();
    Ожидаем.Что(ЗавершитьОперацию).ИмеетТип("Булево");
    Ожидаем.Что(ВосстановитьМетаданные).ИмеетТип("Булево");
    НачатьЗаполнениеПараметровЗапуска("infobase config repair");
    Если ЗавершитьОперацию Тогда
        ПараметрыЗапуска.Добавить("--commit");
    Иначе
        ПараметрыЗапуска.Добавить("--rollback");
    КонецЕсли;
    ДобавитьПараметрЕслиЗаполнен("--fix-metadata", Ложь);        
    
    ВыполнитьКоманду();
КонецПроцедуры

// СписокОбщихРеквизитов
//      Получение списка имен общих реквизитов прикладного решения.
// Параметры:
//  
// Возвращаемое значение:
//   Строка - список имен общих реквизитов конфигурации.
Функция СписокОбщихРеквизитов() Экспорт
    
    Ожидаем.Что(СравнитьВерсии(Версия, "8.3.20") > 0, "Версия платформы 1С должна быть старше, чем 8.3.20").ЭтоИстина();
    НачатьЗаполнениеПараметровЗапуска("infobase config data-separation list");
    
    Результат = ВыполнитьКоманду();
    Возврат Результат;
КонецФункции

// ИДПоколенияДанных
//       Получение идентификатора поколения данных конфигурации.
// Параметры:
//   ИмяРасширения - Строка - если указано, то идентификатор поколения данных расширения
// Возвращаемое значение:
//   Строка - идентификатор.
Функция ИДПоколенияДанных(Знач ИмяРасширения = "") Экспорт
    
    Ожидаем.Что(СравнитьВерсии(Версия, "8.3.20") > 0, "Версия платформы 1С должна быть старше, чем 8.3.20").ЭтоИстина();
    НачатьЗаполнениеПараметровЗапуска("infobase config generation-id");
    ДобавитьПараметрЕслиЗаполнен("--name", ИмяРасширения, "");
    
    Результат = ВыполнитьКоманду();
    Возврат Результат;
КонецФункции

// #Область   Работа с расширениями

// СоздатьРасширение
//      Создать расширение 
// Параметры:
//   ИмяРасширения - Строка - Имя расширения (обязательный). Строка должна удовлетворять требованиям 1С к именам
//   ПрефиксИмен - Строка - Префикс имен (обязательный). Должен удовлетворять правилам формирования имени.
//      Имя должно состоять из одного слова, начинаться с буквы и не содержать специальных символов кроме "_".
//   Синоним - Строка -  Синоним в формате функции NStr()
//   НазначениеРасширения - строка - должно быть одним из следующих слов: customization, add-on, patch
// Возвращаемое значение:
// 
Процедура СоздатьРасширение(
    Знач ИмяРасширения,
    Знач ПрефиксИмен,
    Знач Синоним = "",
    Знач НазначениеРасширения = "add-on"
    )  Экспорт
    
    Ожидаем.Что(СравнитьВерсии(Версия, "8.3.20") > 0,
         "Версия платформы 1С должна быть старше, чем 8.3.20")
        .ЭтоИстина();
    Ожидаем.Что(ЯвляетсяИменем(ИмяРасширения),
         "Параметром должна быть строка, удовлетворяющая требованиям к имени переменной")
        .ЭтоИстина();
    Ожидаем.Что(ЯвляетсяИменем(ПрефиксИмен), 
        "Параметром должна быть строка, удовлетворяющая требованиям к имени переменной")
        .ЭтоИстина();
    Ожидаем.Что(СтрНайти("customization,add-on,patch", НРег(НазначениеРасширения)) > 0,
        "Назначение расширения может быть одним из customization, add-on, patch").ЭтоИстина();

    НачатьЗаполнениеПараметровЗапуска("infobase config extension create");
    ДобавитьПараметрЕслиЗаполнен("--name", ИмяРасширения);
    ДобавитьПараметрЕслиЗаполнен("--name-prefix", ПрефиксИмен);
    ДобавитьПараметрЕслиЗаполнен("--synonym", """" + Синоним + """");
    ДобавитьПараметрЕслиЗаполнен("--purpose", НазначениеРасширения);

    УспешныеКодыВозврата = Новый Массив;
    УспешныеКодыВозврата.Добавить(0);
    УспешныеКодыВозврата.Добавить(102); // это костыль, но команда падает с таким кодом. При этом расширение создается.

    ВыполнитьКоманду(УспешныеКодыВозврата);  

КонецПроцедуры  

// ИнформацияОРасширении
//       Получить информацию о расширении 
// Параметры:
//   ИмяРасширения - Строка - должна удовлетворять требованиям 1С к именам
// Возвращаемое значение:
//   Строка - Информация о расширении в следующем виде:<br>
//      name                         : "СуперРасширение"<br>
//      version                      :<br>
//      active                       : yes<br>
//      purpose                      : add-on<br>
//      safe-mode                    : yes<br>
//      security-profile-name        :<br>
//      unsafe-action-protection     : yes<br>
//      used-in-distributed-infobase : no<br>
//      scope                        : infobase<br>
//      hash-sum                     : "DH5A+FGtydy+dZ9jsjV2ZBuskfE="<br>
Функция ИнформацияОРасширении(Знач ИмяРасширения) Экспорт

    Ожидаем.Что(СравнитьВерсии(Версия, "8.3.20") > 0, 
        "Версия платформы 1С должна быть старше, чем 8.3.20")
        .ЭтоИстина();
    Ожидаем.Что(ЯвляетсяИменем(ИмяРасширения),
         "Параметром должна быть строка, удовлетворяющая требованиям к имени переменной")
         .ЭтоИстина();
    
    НачатьЗаполнениеПараметровЗапуска("infobase config extension info");
    ДобавитьПараметрЕслиЗаполнен("--name", ИмяРасширения);

    Результат = ВыполнитьКоманду();
    Возврат Результат;
КонецФункции

// СписокРасширений
//      Получить список расширений, подключенных к конфигурации автономного сервера 
// Параметры:
// Возвращаемое значение:
//   Строка - Список расширений 
Функция СписокРасширений() Экспорт

    Ожидаем.Что(СравнитьВерсии(Версия, "8.3.20") > 0, "Версия платформы 1С должна быть старше, чем 8.3.20").ЭтоИстина();
     
    НачатьЗаполнениеПараметровЗапуска("infobase config extension list");
    
    Результат = ВыполнитьКоманду();
    Возврат Результат;
КонецФункции

// ИзменитьСвойстваРасширения
//       Изменить свойства расширения 
// Параметры:
//   ИмяРасширения - Строка - Имя расширения, у которого будем изменять свойства
//   Активность - Булево - Активность
//   БезопасныйРежим - Булево - Безопасный режим
//   ИмяПрофиляБезопасности -Булево - включить/выключить
//   ЗащитаОтОпасныхДействий -Булево - защита от опасных действий
//   ИспользуетсяВ_РИБ - Булево - расширение используется в РИБ
//   ОбластьДействия_ИБ - Булево - если Истина - область действия ИБ, иначе - разделитель данных
// Возвращаемое значение:
// 
Процедура ИзменитьСвойстваРасширения(
    Знач ИмяРасширения,
    Знач Активность,
    Знач БезопасныйРежим,
    Знач ИмяПрофиляБезопасности,
    Знач ЗащитаОтОпасныхДействий,
    Знач ИспользуетсяВ_РИБ,
    Знач ОбластьДействия_ИБ
    ) Экспорт

    ТипБулево = "Булево";
    Ожидаем.Что(СравнитьВерсии(Версия, "8.3.20") > 0,
         "Версия платформы 1С должна быть старше, чем 8.3.20")
         .ЭтоИстина();
    Ожидаем.Что(ЯвляетсяИменем(ИмяРасширения),
         "Параметром должна быть строка, удовлетворяющая требованиям к имени переменной")
        .ЭтоИстина();
    Ожидаем.Что(Активность).ИмеетТип(ТипБулево);
    Ожидаем.Что(БезопасныйРежим).ИмеетТип(ТипБулево);
    Ожидаем.Что(ИмяПрофиляБезопасности).ИмеетТип(ТипБулево);
    Ожидаем.Что(ЗащитаОтОпасныхДействий).ИмеетТип(ТипБулево);
    Ожидаем.Что(ИспользуетсяВ_РИБ).ИмеетТип(ТипБулево);
    Ожидаем.Что(ОбластьДействия_ИБ).ИмеетТип(ТипБулево);

    НачатьЗаполнениеПараметровЗапуска("infobase config extension update");
    ДобавитьПараметрЕслиЗаполнен("--name", ИмяРасширения);
    
    ПараметрыЗапуска.Добавить("--active=" + БулевоВСтроку(Активность));
    ПараметрыЗапуска.Добавить("--safe-mode=" + БулевоВСтроку(БезопасныйРежим));
    ПараметрыЗапуска.Добавить("--security-profile-name=" + БулевоВСтроку(ИмяПрофиляБезопасности));
    ПараметрыЗапуска.Добавить("--unsafe-action-protection=" + БулевоВСтроку(ЗащитаОтОпасныхДействий));
    ПараметрыЗапуска.Добавить("--used-in-distributed-infobase=" + БулевоВСтроку(ИспользуетсяВ_РИБ));
    Если ОбластьДействия_ИБ Тогда
        ПараметрыЗапуска.Добавить("--scope=infobase");
    Иначе
        ПараметрыЗапуска.Добавить("--scope=data-separation");  
    КонецЕсли;      

    ВыполнитьКоманду();
КонецПроцедуры    

// УдалитьРасширение
//      Удалить расширение 
// Параметры:
//   ИмяРасширения - Строка - Имя расширения, у которого будем изменять свойства
// Возвращаемое значение:
// 
Процедура УдалитьРасширение(
    Знач ИмяРасширения
    ) Экспорт

    Ожидаем.Что(СравнитьВерсии(Версия, "8.3.20") > 0,
         "Версия платформы 1С должна быть старше, чем 8.3.20")
         .ЭтоИстина();
    Ожидаем.Что(ЯвляетсяИменем(ИмяРасширения),
         "Параметром должна быть строка, удовлетворяющая требованиям к имени переменной")
         .ЭтоИстина();
   
    НачатьЗаполнениеПараметровЗапуска("infobase config extension delete");
    ДобавитьПараметрЕслиЗаполнен("--name", ИмяРасширения);
    
    ВыполнитьКоманду();
КонецПроцедуры    

// УдалитьВсеРасширения
//       Удалить все расширения 
// Параметры:
// Возвращаемое значение:
// 
Процедура УдалитьВсеРасширения() Экспорт

    Ожидаем.Что(СравнитьВерсии(Версия, "8.3.20") > 0, "Версия платформы 1С должна быть старше, чем 8.3.20").ЭтоИстина();
    
    НачатьЗаполнениеПараметровЗапуска("infobase config extension delete --all");
   
    ВыполнитьКоманду();
КонецПроцедуры   

// #КонецОбласти

// #КонецОбласти

// #Область Универсальные методы
// ПутьКПриложению
//      Устанавливает и возвращает путь к файлу приложения
// Параметры:
//   Путь - Строка - путь к файлу приложения
// Возвращаемое значение:
//   Строка - текущий путь к приложению
//
Функция ПутьКПриложению(Знач Путь = Неопределено) Экспорт
    
    Если Путь <> Неопределено Тогда
        Ожидаем.Что(Путь).ИмеетТип("Строка");
        ПутьКПриложению = Путь;
        Версия();
    КонецЕсли;    
    Возврат ПутьКПриложению;
КонецФункции  

// УстановитьПараметрыСервернойИБ
//      Установить параметры запуска для клиент-серверной информационной базы
// Параметры:
//   ТипСУБД - Строка - Тип СУБД. Допускаются значения
//          MSSQLServer - Microsoft SQL Server;
//        	PostgreSQL - PostgreSQL;
//        	IBMDB2 - IBM DB2;
//        	OracleDatabase - Oracle Database.
//        
//   СерверСУБД - строка - Имя сервера СУБД;
//   ИмяБД - Строка - Имя базы данных в СУБД;
//   ПользовательБД - Строка - Имя пользователя СУБД;
//   ПарольБД - Строка - Пароль пользователя в БД;

Процедура УстановитьПараметрыСервернойИБ(Знач ТипСУБД,Знач СерверСУБД,Знач ИмяБД,Знач ПользовательБД,Знач ПарольБД) Экспорт
        
    ПараметрыФайловойИБ.Очистить();
    ПараметрыСервернойИБ.Очистить();
    ПараметрыКонфигурацииАС.Очистить();

    ПеременнаяСредыПользовательБД = "IBCMD_DB_USR";
    ПеременнаяСредыПарольБД = "IBCMD_DB_PSW";

    Ожидаем.Что(СтрНайти("mssqlserver,postgresql,ibmdb2,oracledatabase", НРег(ТипСУБД)) > 0,
        "Тип СУБД должен быть один из MSSQLServer, PostgreSQL,IBMDB2,OracleDatabase").ЭтоИстина();


    
    

    ПараметрыСервернойИБ.Добавить(СтрШаблон("--dbms=%1", ТипСУБД));
    ПараметрыСервернойИБ.Добавить(СтрШаблон("--db-server=%1", СерверСУБД));
    ПараметрыСервернойИБ.Добавить(СтрШаблон("--db-name=%1", ИмяБД));
    
    Если ЗначениеЗаполнено(ПользовательБД) Тогда
        ПеременныеСредыКоманды.Вставить(ПеременнаяСредыПользовательБД, ПользовательБД);
        ПараметрыСервернойИБ.Добавить(СтрШаблон("--db-user=%1", ШаблонПеременнойСреды(ПеременнаяСредыПользовательБД)));
    КонецЕсли;

    Если ЗначениеЗаполнено(ПарольБД) Тогда
        ПеременныеСредыКоманды.Вставить(ПеременнаяСредыПарольБД, ПарольБД);
        ПараметрыСервернойИБ.Добавить(СтрШаблон("--db-pwd=%1", ШаблонПеременнойСреды(ПеременнаяСредыПарольБД)));
    КонецЕсли;

КонецПроцедуры

// УстановитьПараметрыФайловойИБ
//       Установить параметры запуска для файловой информационной базы
// Параметры:
//   КаталогИБ - Строка - Путь к файловой информационной базе;
Процедура УстановитьПараметрыФайловойИБ(Знач КаталогИБ) Экспорт

    ПараметрыСервернойИБ.Очистить();
    ПараметрыФайловойИБ.Очистить();
    ПараметрыКонфигурацииАС.Очистить();

    ПараметрыФайловойИБ.Добавить("--db-path=" + ОбернутьВКавычки(КаталогИБ));
   
КонецПроцедуры   

// УстановитьКонфигурационныйФайл
//       Установить конфигурационный файл автономного сервера 
// Параметры:
//   ИмяФайла - Строка - Полный путь к файлу конфигурации автономного сервера (yml);
Процедура УстановитьКонфигурационныйФайл(Знач ИмяФайла) Экспорт

    ПараметрыСервернойИБ.Очистить();
    ПараметрыФайловойИБ.Очистить();
    ПараметрыКонфигурацииАС.Очистить();
    
    ПараметрыКонфигурацииАС.Добавить("--config=" + ОбернутьВКавычки(ИмяФайла));
   
КонецПроцедуры   

// УстановитьПараметрыАвторизацииИБ
//       Установить параметры авторизации информационной базы
// Параметры:
//   ПользовательИБ - Строка - имя пользователя информационной базы
//   ПарольИБ - Строка - пароль пользователя информационной базы
Процедура УстановитьПараметрыАвторизацииИБ(
    Знач ПользовательИБ,
    Знач ПарольИБ = Неопределено) Экспорт

    ПараметрыАвторизацииИБ.Очистить();

    ПеременнаяСредыПользовательИБ = "IBCMD_IB_USR";
    ПеременнаяСредыПарольИБ = "IBCMD_IB_PSW";

    Если СравнитьВерсии(Версия, "8.3.18.1563") > 0 Тогда

        Если ЗначениеЗаполнено(ПользовательИБ) Тогда
            ПеременныеСредыКоманды.Вставить(ПеременнаяСредыПользовательИБ, ПользовательИБ);
            ПараметрыАвторизацииИБ.Добавить(СтрШаблон("--user=%1", ШаблонПеременнойСреды(ПеременнаяСредыПользовательИБ)));
        КонецЕсли;

        Если ЗначениеЗаполнено(ПарольИБ) Тогда
            ПеременныеСредыКоманды.Вставить(ПеременнаяСредыПарольИБ, ПарольИБ);
            ПараметрыАвторизацииИБ.Добавить(СтрШаблон("--password=%1", ШаблонПеременнойСреды(ПеременнаяСредыПарольИБ)));
        КонецЕсли;  
    КонецЕсли;

КонецПроцедуры    

// УстановитьПараметрыАвтономногоСервера
//      Установить параметры автономного сервера
// Параметры:
//   КаталогДанныхАС - Строка - каталог, в котором должны размещаться данные автономного сервера
Процедура УстановитьПараметрыАвтономногоСервера(
    Знач КаталогДанныхАС) Экспорт

    ПараметрыАвтономногоСервера.Очистить();
    Ожидаем.Что(КаталогДанныхАС).ИмеетТип("Строка");
    Если СравнитьВерсии(Версия, "8.3.20") > 0 Тогда
        ПараметрыАвтономногоСервера.Добавить("--data=" + ОбернутьВКавычки(КаталогДанныхАС));
    КонецЕсли;

КонецПроцедуры   

// СоздатьИБ
//      Создать пустую информационную базу без данных и конфигурации.
//      Для команды автоматом устанавливаются параметры "--create-database" и "--force"
// Параметры:
//   Локаль - Строка - имя локали 
//   СмещениеДат - Число - Смещение дат в годах (имеет смысл только для MSSQL)
Процедура СоздатьИБ(
    Знач Локаль = Неопределено, 
    Знач СмещениеДат = 2000) Экспорт

    НачатьЗаполнениеПараметровЗапуска("infobase create");

    ДобавитьПараметрЕслиЗаполнен("--locale", Локаль);
    ДобавитьПараметрЕслиЗаполнен("--date-offset", СмещениеДат, 2000);
    
    ПараметрыЗапуска.Добавить("--create-database");
    
    ПараметрыЗапуска.Добавить("--force");
    
    ВыполнитьКоманду();

КонецПроцедуры

// СоздатьИБИзФайлаВыгрузки
//      Создать информационную базу из файла выгрузки.
//      Для команды автоматом устанавливаются параметры "--create-database" и "--force"
// Параметр "--apply" не устанавливается, предполагается использование отдельной команды
// Параметры:
//   ПутьКФайлуВыгрузки - Строка - Путь к файлу выгрузки информационной базы
//   Локаль - Строка - имя локали 
//   СмещениеДат - Число - Смещение дат в годах (имеет смысл только для MSSQL)
Процедура СоздатьИБИзФайлаВыгрузки(
    Знач ПутьКФайлуВыгрузки,
    Знач Локаль = Неопределено,
    Знач СмещениеДат = 2000) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase create");
    
    ДобавитьПараметрЕслиЗаполнен("--locale", Локаль);
    ДобавитьПараметрЕслиЗаполнен("--date-offset", СмещениеДат, 2000);
    ПараметрыЗапуска.Добавить("--create-database");
    
    ДобавитьПараметрЕслиЗаполнен("--restore", ПутьКФайлуВыгрузки, "");
   
    ПараметрыЗапуска.Добавить("--force");
    
    ВыполнитьКоманду();
КонецПроцедуры

// СоздатьИБИзФайлаКонфигурации
//      Создать информационную базу из файла конфигурации.
//      Для команды автоматом устанавливаются параметры "--create-database" и "--force"
// Параметр "--apply" не устанавливается, предполагается использование отдельной команды
// Параметры:
//   ПутьКФайлуКонфигурации - Строка - Путь к файлу конфигурации информационной базы
//   Локаль - Строка - имя локали 
//   СмещениеДат - Число - Смещение дат в годах (имеет смысл только для MSSQL)
Процедура СоздатьИБИзФайлаКонфигурации(
    Знач ПутьКФайлуКонфигурации,
    Знач Локаль = Неопределено,
    Знач СмещениеДат = 2000) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase create");
        
    ДобавитьПараметрЕслиЗаполнен("--locale", Локаль);
    ДобавитьПараметрЕслиЗаполнен("--date-offset", СмещениеДат, 2000);
    ПараметрыЗапуска.Добавить("--create-database");
    
    ДобавитьПараметрЕслиЗаполнен("--load", ПутьКФайлуКонфигурации, "");
   
    ПараметрыЗапуска.Добавить("--force");
    
    ВыполнитьКоманду();
КонецПроцедуры

// СоздатьИБИзФайловКонфигурации
//       Создать информационную базу из файлов конфигурации.
// Для команды автоматом устанавливаются параметры "--create-database" и "--force"
// Параметр "--apply" не устанавливается, предполагается использование отдельной команды
// Параметры:
//   ПутьККаталогуВыгрузки - Строка - Путь к каталогу выгрузки конфигурации в файлы
//   Локаль - Строка - имя локали 
//   СмещениеДат - Число - Смещение дат в годах (имеет смысл только для MSSQL)
Процедура СоздатьИБИзФайловКонфигурации(
    Знач ПутьККаталогуВыгрузки,
    Знач Локаль = Неопределено,
    Знач СмещениеДат = 2000
    ) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase create");
       
    ДобавитьПараметрЕслиЗаполнен("--locale", Локаль);
    ДобавитьПараметрЕслиЗаполнен("--date-offset", СмещениеДат, 2000);
    ПараметрыЗапуска.Добавить("--create-database");
    
    ДобавитьПараметрЕслиЗаполнен("--import", ПутьККаталогуВыгрузки, "");
    
    ПараметрыЗапуска.Добавить("--force");
            
    ВыполнитьКоманду();
КонецПроцедуры

// ВыгрузитьДанныеИБ
//      Выгрузить данные из информационной базы
// Параметры:
//   ПутьКФайлуВыгрузки - Строка - Путь к файлу выгрузки
Процедура ВыгрузитьДанныеИБ(Знач ПутьКФайлуВыгрузки) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase dump");
           
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ПутьКФайлуВыгрузки));

    ВыполнитьКоманду();
КонецПроцедуры

// ЗагрузитьДанныеИБ
//      Загрузить данные из файла выгрузки
// Автоматом добавляется параметр "--create-database"
// Параметры:
//   ПутьКФайлуВыгрузки - Строка - Путь к файлу выгрузки
Процедура ЗагрузитьДанныеИБ(Знач ПутьКФайлуВыгрузки) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase restore");
    
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ПутьКФайлуВыгрузки));

    ВыполнитьКоманду();

КонецПроцедуры

// // Очистить информационную базу
// Процедура ОчиститьИБ() Экспорт
    
//     НачатьЗаполнениеПараметровЗапуска("infobase clear");
         
//     ВыполнитьКоманду();

// КонецПроцедуры

// ЗагрузитьКонфигурацию
//      Загрузить конфигурацию из файла
// Параметры:
//   ПутьКФайлуКонфигурации - Строка - Путь к файлу конфигурации
//   ИмяРасширения -Строка - Имя расширения. Если не заполнено, то будет загружена
//      основная конфигурация
Процедура ЗагрузитьКонфигурацию(Знач ПутьКФайлуКонфигурации, Знач ИмяРасширения = "") Экспорт

    НачатьЗаполнениеПараметровЗапуска("infobase config load");
        
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    ПараметрыЗапуска.Добавить("--force");
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ПутьКФайлуКонфигурации));

    ВыполнитьКоманду();
КонецПроцедуры

// ВыгрузитьКонфигурациюВФайл
//      Выгрузить конфигурацию базы данных в файл
// Параметры:
//   ПутьКФайлуКонфигурации - Строка - Путь к файлу конфигурации
//   ИмяРасширения - Строка - Имя расширения. Если не заполнено, то будет выгружена
//      конфигурация БД или основная конфигурация (см. следующий параметр)
//   ВыгружатьОсновнуюКонфигурацию - Булево - Если Истина, то будет выгружена основная
//      конфигурация
Процедура ВыгрузитьКонфигурациюВФайл(
    Знач ПутьКФайлуКонфигурации,
    Знач ИмяРасширения = "",
    Знач ВыгружатьОсновнуюКонфигурацию = ЛОЖЬ) Экспорт

    НачатьЗаполнениеПараметровЗапуска("infobase config save");
           
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    // ПараметрыЗапуска.Добавить("--force");
    Если ВыгружатьОсновнуюКонфигурацию Тогда
        Если СравнитьВерсии(Версия, "8.3.20") Тогда
            ПараметрыЗапуска.Добавить("--db");
        Иначе    
            ПараметрыЗапуска.Добавить("--staging");
        КонецЕсли;    
    КонецЕсли;    
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ПутьКФайлуКонфигурации));

    ВыполнитьКоманду();
КонецПроцедуры

// ПроверитьКонфигурацию
//      Проверить конфигурацию
// Параметры:
//   ИмяРасширения - Строка - имя расширения
// Возвращаемое значение:
//   Строка - строка консольного вывода команды 
Функция ПроверитьКонфигурацию(Знач ИмяРасширения = "") Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase config check");
      
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    ПараметрыЗапуска.Добавить("--force");
    Рез = ВыполнитьКоманду();
    Возврат Рез;
КонецФункции    

// ОбновитьКонфигурациюБазыДанных
//      Обновить конфигурацию
// Параметры:
//   ИмяРасширения - Строка - Имя расширения
//   ДинамическоеОбновление - Строка - Использование динамического обновления.<br>
//      auto - автоматически (по-умолчанию) <br>
//      disable - использование запрещено <br>
//      prompt - запрос пользователя <br>
//      force - использовать только динамическое обновление. <br>
//   ЗавершатьСеансы - Строка - Завершение активных сеансов в случае необходимости установки
//      эксклюзивной блокировки информационной базы. <br>
//      auto - автоматически (по-умолчанию)<br>
//      disable - использование запрещено<br>
//      prompt - запрос пользователя<br>
//      force - принудительно завершать сеансы.<br>
// ВозвращаемоеЗначение:
Процедура ОбновитьКонфигурациюБазыДанных(
    Знач ИмяРасширения = "",
    Знач ДинамическоеОбновление = "auto",
    Знач ЗавершатьСеансы = "auto") Экспорт

    НачатьЗаполнениеПараметровЗапуска("infobase config apply");
    
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    ПараметрыЗапуска.Добавить("--force");
    Если СравнитьВерсии(Версия, "8.3.20") Тогда
        Ожидаем.Что(СтрНайти("auto,disable,prompt,force", ДинамическоеОбновление) > 0, 
            "Должно быть одно из auto, disable, prompt, force").ЭтоИстина();
        Ожидаем.Что(СтрНайти("auto,disable,prompt,force", ЗавершатьСеансы) > 0, 
            "Должно быть одно из auto, disable, prompt, force").ЭтоИстина(); 
        ДобавитьПараметрЕслиЗаполнен("--dynamic", ДинамическоеОбновление, "auto");
        ДобавитьПараметрЕслиЗаполнен("--session-terminate", ЗавершатьСеансы, "auto");       
    КонецЕсли;    
    
    ВыполнитьКоманду();

КонецПроцедуры

// ВозвратитьсяККонфигурацииБазыДанных
//      Возвратиться к конфигурации базы данных
// Параметры:
//   ИмяРасширения - Строка - имя расширения
Процедура ВозвратитьсяККонфигурацииБазыДанных(Знач ИмяРасширения = "") Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase config reset");
           
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    ПараметрыЗапуска.Добавить("--force");
    ВыполнитьКоманду();
КонецПроцедуры

// ВыгрузитьВФайлСостояниеКонфигурации
//      Вывести информацию о состоянии конфигурации (ConfigDumpInfo)
// Параметры:
//   ПутьКФайлуXML - Строка - Путь к файлу состояния конфигурации (ConfigDumpInfo)
//   ИмяРасширения - Строка - Имя расширения
Процедура ВыгрузитьВФайлСостояниеКонфигурации(Знач ПутьКФайлуXML, Знач ИмяРасширения = "") Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase config export info");
       
    ДобавитьПараметрЕслиЗаполнен("--out", ОбернутьВКавычки(ПутьКФайлуXML));
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
       
    ВыполнитьКоманду();
КонецПроцедуры    

// ВыгрузитьВФайлИзмененияКонфигурации
//      Вывести информацию о изменениях конфигурации относительно переданного состояния (ConfigDumpInfo)
// Параметры:
//   ПутьКФайлуXMLИзменений - Строка - Путь к файлу для записи информации о изменениях в конфигурации
//   ПутьКФайлуXMLВыгрузки - Строка - Путь к файлу информации о конфигурации
//                           (ConfigDumpInfo) относительно которого вычисляются изменения текущей конфигурации
//   ИмяРасширения - Строка - Имя расширения
//   ВыводитьВКраткомФормате - Булево - Отображать информацию о изменениях в сокращенном виде
Процедура ВыгрузитьВФайлИзмененияКонфигурации(
    Знач ПутьКФайлуXMLИзменений,
    Знач ПутьКФайлуXMLВыгрузки,
    Знач ИмяРасширения = "",
    Знач ВыводитьВКраткомФормате = ЛОЖЬ
    ) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase config export status");
           
    ДобавитьПараметрЕслиЗаполнен("--out", ПутьКФайлуXMLИзменений);
    ДобавитьПараметрЕслиЗаполнен("--base", ПутьКФайлуXMLВыгрузки);
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    Если ВыводитьВКраткомФормате Тогда
        ПараметрыЗапуска.Добавить("--short");
    КонецЕсли;    
    ВыполнитьКоманду();
КонецПроцедуры  

// ВыгрузитьОбъектыКонфигурацииВФайлы
//      Экспорт выбранных объектов конфигурации в XML
// Параметры:
//   КаталогВыгрузки - Строка - Каталог для экспорта 
//   ВыгружатьРекурсивно - Булево - Выполнять экспорт дочерних объектов.
//   Объекты - Массив - Список строк - имен объектов конфигурации для экспорта.
//   ИмяРасширения - Строка - Имя расширения
//   ВАрхив - Булево - выгружать в zip-архив XML-файлов. Параметр КаталогВыгрузки должен быть именем файла.<br>
//          !!! При версии платформы < 8.3.21 параметр игнорируется !!!
//   НаСервере - Булево - если Истина, то выгружать на сервере.<br>
//          !!! При версии платформы < 8.3.21 параметр игнорируется !!!
//   КоличествоПотоков - Число - количество потоков выгрузки. По умолчанию будет создано количество потоков, 
//          по количеству ядер процессоров.<br>
//          !!! При версии платформы < 8.3.21 параметр игнорируется !!!
Процедура ВыгрузитьОбъектыКонфигурацииВФайлы(
    Знач КаталогВыгрузки,
    Знач ВыгружатьРекурсивно,
    Объекты,
    Знач ИмяРасширения = "",
    Знач ВАрхив = Ложь,
    Знач НаСервере = Ложь,
    Знач КоличествоПотоков = 0) Экспорт

    Ожидаем.Что(Объекты).ИмеетТип("Массив");

    НачатьЗаполнениеПараметровЗапуска("infobase config export objects");
       
    ДобавитьПараметрЕслиЗаполнен("--out", ОбернутьВКавычки(КаталогВыгрузки));
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    Если ВыгружатьРекурсивно Тогда
        ПараметрыЗапуска.Добавить("--recursive");
    КонецЕсли;    
    Если Объекты.Количество() > 0 Тогда
        Для Каждого Объект Из Объекты Цикл
            ПараметрыЗапуска.Добавить(Объект);
        КонецЦикла;
    Иначе
        ВызватьИсключение "Не заданы объекты конфигурации для экспорта в файлы!";    
    КонецЕсли;   

    Если СравнитьВерсии(Версия, "8.3.21") > 0 Тогда
        Если ВАрхив Тогда
            ПараметрыЗапуска.Добавить("--archive");
        КонецЕсли;
        Если НаСервере Тогда    
            ПараметрыЗапуска.Добавить("--server");
        КонецЕсли;    
        ДобавитьПараметрЕслиЗаполнен("--threads", КоличествоПотоков, 0);
         
    КонецЕсли;         
    ВыполнитьКоманду();
КонецПроцедуры

// ВыгрузитьВсеРасширенияВФайлы
//      Выгрузить все расширения в файлы
// Параметры:
//  КаталогВыгрузки - Строка - Каталог выгрузки расширений в файлы
//  ВАрхив - Булево - выгружать в zip-архив XML-файлов. Параметр КаталогВыгрузки должен быть именем файла.<br>
//          !!! При версии платформы < 8.3.21 параметр игнорируется !!!
//  НаСервере - Булево - если Истина, то выгружать на сервере.<br>
//          !!! При версии платформы < 8.3.21 параметр игнорируется !!!
//  КоличествоПотоков - Число - количество потоков выгрузки. По умолчанию будет создано количество потоков, 
//          по количеству ядер процессоров.<br>
//          !!! При версии платформы < 8.3.21 параметр игнорируется !!!
Процедура ВыгрузитьВсеРасширенияВФайлы(
    Знач КаталогВыгрузки,
    Знач ВАрхив = Ложь,
    Знач НаСервере = Ложь,
    Знач КоличествоПотоков = 0) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase config export all-extensions");
    
    Если СравнитьВерсии(Версия, "8.3.21") > 0 Тогда
        Если ВАрхив Тогда
            ПараметрыЗапуска.Добавить("--archive");
        КонецЕсли;
        Если НаСервере Тогда    
            ПараметрыЗапуска.Добавить("--server");
        КонецЕсли;    
        ДобавитьПараметрЕслиЗаполнен("--threads", КоличествоПотоков, 0);
        
    КонецЕсли;    

    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(КаталогВыгрузки));
    ВыполнитьКоманду();
КонецПроцедуры

// ВыгрузитьКонфигурациюВФайлы
//      Экспорт конфигурации в файлы
// Параметры:
//   КаталогВыгрузки -Строка - Каталог для выгрузки конфигурации в файлы
//   ПутьКФайлуXMLВыгрузки - Строка - Путь к файлу информации о конфигурации
//        (ConfigDumpInfo) относительно которого вычисляются изменения текущей конфигурации
//   ИмяРасширения - Строка - Имя расширения
//   Синхронизировать - Булево - Синхронизировать имеющийся экспорт с конфигурацией
//   ВАрхив - Булево - выгружать в zip-архив XML-файлов. Параметр КаталогВыгрузки должен быть именем файла.<br>
//          !!! При версии платформы < 8.3.21 параметр игнорируется !!!
//   НаСервере - Булево - если Истина, то выгружать на сервере.<br>
//          !!! При версии платформы < 8.3.21 параметр игнорируется !!!
//   КоличествоПотоков - Число - количество потоков выгрузки. По умолчанию будет создано количество потоков, 
//          по количеству ядер процессоров.<br>
//          !!! При версии платформы < 8.3.21 параметр игнорируется !!!
//   НеВыгружатьНеСуществующиеОбъекты - Булево - если Истина, запрещает выгрузку в XML-файлы ссылок на
//          несуществующие объекты<br>
//          !!! При версии платформы < 8.3.21 параметр игнорируется !!!
Процедура ВыгрузитьКонфигурациюВФайлы(
    Знач КаталогВыгрузки,
    Знач ПутьКФайлуXMLВыгрузки = "",
    Знач ИмяРасширения = "",
    Знач Синхронизировать = ИСТИНА,
    Знач ВАрхив = Ложь,
    Знач НаСервере = Ложь,
    Знач КоличествоПотоков = 0,
    Знач НеВыгружатьНеСуществующиеОбъекты = Ложь
    ) Экспорт

    НачатьЗаполнениеПараметровЗапуска("infobase config export");
       
    ДобавитьПараметрЕслиЗаполнен("--base", ОбернутьВКавычки(ПутьКФайлуXMLВыгрузки), """""");
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    Если Синхронизировать Тогда
        ПараметрыЗапуска.Добавить("--sync");
    КонецЕсли;    
    Если СравнитьВерсии(Версия, "8.3.21") > 0 Тогда
        Если ВАрхив Тогда
            ПараметрыЗапуска.Добавить("--archive");
        КонецЕсли;
        Если НаСервере Тогда    
            ПараметрыЗапуска.Добавить("--server");
        КонецЕсли;    
        ДобавитьПараметрЕслиЗаполнен("--threads", КоличествоПотоков, 0);
        Если НеВыгружатьНеСуществующиеОбъекты Тогда
            ПараметрыЗапуска.Добавить("--ignore-unresolved-refs");
        КонецЕсли;    
    КонецЕсли;    
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(КаталогВыгрузки));
    ВыполнитьКоманду();
КонецПроцедуры

// ЗагрузитьКонфигурациюИзФайлов
//      Загружает основную конфигурацию или расширение из файлов
// Параметры:
//   КаталогВыгрузки - Строка - Имя корневого каталога с ранее выгруженными файлами
//   ИмяРасширения - Строка - Имя расширения конфигурации. Если не заполнено, то загружать
//                           в основную конфигурацию
//   ОтключитьПроверку - Булево - Не проверять метаданные после загрузки
Процедура ЗагрузитьКонфигурациюИзФайлов(
    Знач КаталогВыгрузки,
    Знач ИмяРасширения = "",
    Знач ОтключитьПроверку = Ложь
    ) Экспорт

    НачатьЗаполнениеПараметровЗапуска("infobase config import");
       
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");

    Если СравнитьВерсии(Версия,"8.3.20") Тогда
        Ожидаем.Что(ОтключитьПроверку).ИмеетТип("Булево");
        Если ОтключитьПроверку Тогда
            ПараметрыЗапуска.Добавить("--no-check");
        КонецЕсли;
    КонецЕсли;    
    
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(КаталогВыгрузки));     

    ВыполнитьКоманду();
КонецПроцедуры

// ЗагрузитьВыбранныеФайлыКонфигурации
//      Импорт выбранных файлов конфигурации из XML
// Параметры:
//   КаталогВыгрузки - Строка - каталог выгрузки файлов
//   ВыбранныеФайлы - Массив - список файлов для загрузки
//   ИмяРасширения - Строка - имя расширения
//   ОтключитьПроверку - Булево - Не проверять метаданные после загрузки
//   ИзАрхива - Булево - Загружать из zip-архива. Параметр КаталогВыгрузки должен быть именем архива.
Процедура ЗагрузитьВыбранныеФайлыКонфигурации(
    Знач КаталогВыгрузки,
    Знач ВыбранныеФайлы,
    Знач ИмяРасширения = "",
    Знач ОтключитьПроверку = Ложь,
    Знач ИзАрхива = Ложь
    ) Экспорт
    Ожидаем.Что(ВыбранныеФайлы).ИмеетТип("Массив");
    Ожидаем.Что(ВыбранныеФайлы, "Не заданы файлы конфигурации для импорта в объекты метаданных!").Заполнено();

    НачатьЗаполнениеПараметровЗапуска("infobase config import files");
       
    ДобавитьПараметрЕслиЗаполнен("--base-dir", ОбернутьВКавычки(КаталогВыгрузки));
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");

    Если СравнитьВерсии(Версия,"8.3.20") Тогда
        Ожидаем.Что(ОтключитьПроверку).ИмеетТип("Булево");
        Ожидаем.Что(ИзАрхива).ИмеетТип("Булево");
        Если ОтключитьПроверку Тогда
            ПараметрыЗапуска.Добавить("--no-check");
        КонецЕсли;
        Если ИзАрхива Тогда
            ПараметрыЗапуска.Добавить("--archive");
        КонецЕсли;    
    КонецЕсли; 

    ИмяФайлаПараметров = ВременныеФайлы.НовоеИмяФайла("txt");
    Если ВыбранныеФайлы.Количество() = 1 Тогда
        ВыбранныйФайл = ВыбранныеФайлы[0];
        ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ВыбранныйФайл));
    
    Иначе
        СтрокаДляЗаписи = "";
        Если ЭтоWindows Тогда
            Кодировка = КодировкаТекста.ANSI;
        Иначе
            Кодировка = КодировкаТекста.UTF8NoBOM;
        КонецЕсли;
        ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаПараметров, Кодировка);
        Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
            СтрокаДляЗаписи = ?(СтрокаДляЗаписи="", "", Символы.ПС)+ СокрЛП(ВыбранныйФайл);
        КонецЦикла;
        ЗаписьТекста.ЗаписатьСтроку(СокрЛП(СтрокаДляЗаписи),"");
        ЗаписьТекста.Закрыть();

        ПараметрыЗапуска.Добавить("<");
        ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ИмяФайлаПараметров));

    КонецЕсли;

    ВыполнитьКоманду();

    ВременныеФайлы.УдалитьФайл(ИмяФайлаПараметров);

КонецПроцедуры   

// ЗагрузитьВсеРасширенияИзФайлов
//      Импорт всех расширений конфигурации из XML
// Параметры:
//   КаталогВыгрузки - строка - Каталог выгрузки расширений в файлы
//   ОтключитьПроверку - Булево - Не проверять метаданные после загрузки
//   ИзАрхива - Булево - Загружать из zip-архива. Параметр КаталогВыгрузки должен быть именем архива.
Процедура ЗагрузитьВсеРасширенияИзФайлов(
    Знач КаталогВыгрузки,
    Знач ОтключитьПроверку = Ложь,
    Знач ИзАрхива = Ложь
    ) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase config import all-extensions");
    
    Если СравнитьВерсии(Версия,"8.3.20") Тогда
        Ожидаем.Что(ОтключитьПроверку).ИмеетТип("Булево");
        Ожидаем.Что(ИзАрхива).ИмеетТип("Булево");
        Если ОтключитьПроверку Тогда
            ПараметрыЗапуска.Добавить("--no-check");
        КонецЕсли;
        Если ИзАрхива Тогда
            ПараметрыЗапуска.Добавить("--archive");
        КонецЕсли;    
    КонецЕсли;    
        
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(КаталогВыгрузки));
    ВыполнитьКоманду();
КонецПроцедуры  

// Версия
//      Получить версию платформы 1С
// Возвращаемое значение:
//  Строка - Версия платформы 1С
Функция Версия() Экспорт
    ПараметрыЗапуска.Очистить();
    ПараметрыЗапуска.Добавить("--version");
    Версия = ВыполнитьКоманду();

    Возврат СокрЛП(Версия);
КонецФункции

// ВыводПоследнейКоманды
//      Возвращает вывод последней выполненной команды.
//
//  Возвращаемое значение:
//   Строка - Вывод команды
//
Функция ВыводПоследнейКоманды() Экспорт

    Если Команда = Неопределено Тогда
        Возврат "";
    Иначе
        Возврат Команда.ПолучитьВывод();
    КонецЕсли;

КонецФункции

// КодВозвратаПоследнейКоманды
//      Возвращает код возврата последней выполненной команды.
//
//  Возвращаемое значение:
//   Число - Код возврата команды
//
Функция КодВозвратаПоследнейКоманды() Экспорт

    Если Команда = Неопределено Тогда
        Возврат 0;
    Иначе
        Возврат Команда.ПолучитьКодВозврата();
    КонецЕсли;

КонецФункции

// ОписанияРасширений
//      Возвращает список расширений информационной базы в виде массива соответствий.
//
//  Возвращаемое значение:
//   Массив - см. НовыйОписаниеРасширения()
//
Функция ОписанияРасширений() Экспорт

    ОписанияРасширений = Новый Массив;

    СписокРасширений = СписокРасширений();

    Если Не ЗначениеЗаполнено(СписокРасширений) Тогда
        Возврат ОписанияРасширений;
    КонецЕсли;

    ИндикаторБлока = "name                         :";

    Для Каждого БлокТекста Из СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(СписокРасширений, ИндикаторБлока, Истина, Истина) Цикл
        
        СтрокиБлока = СтрРазделить(БлокТекста, Символы.ПС);
        Если Не ЗначениеЗаполнено(СтрокиБлока) Тогда
            Продолжить;
        КонецЕсли;
        
        СтрокаСИменем = СтрокиБлока[0];
        СтрокаСИменем = СтрЗаменить(СтрокаСИменем, """", "");
        СтрокаСИменем = СтрЗаменить(СтрокаСИменем, символы.ВК, "");

        СтрокиБлока.Удалить(0);
       
        ОписаниеРасширения = НовыйОписаниеРасширения();

        ОписаниеРасширения.Вставить("name", СтрокаСИменем);

        Для Каждого СтрокаСвойства Из СтрокиБлока Цикл

            ИмяЗначение = СтрРазделить(СтрокаСвойства, ":", Ложь);
            
            ИмяСвойства = СокрЛП(ИмяЗначение[0]);
            ЗначениеСвойства = СтрЗаменить(СокрЛП(ИмяЗначение[1]), """", "");
            
            Если ТипЗнч(ОписаниеРасширения.Получить(ИмяСвойства)) = Тип("Булево") Тогда
                ЗначениеСвойства = СтрокаВБулево(ЗначениеСвойства);
            КонецЕсли;

            ОписаниеРасширения.Вставить(ИмяСвойства, ЗначениеСвойства);
           
        КонецЦикла;
      
        ОписанияРасширений.Добавить(ОписаниеРасширения);

    КонецЦикла;

    Возврат ОписанияРасширений;

КонецФункции

// #КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Сравнить две строки версий.
//  Примеры использования смотрите в тестах.
//
// Параметры:
//  ЭтаВерсия  - Строка - номер версии 
//  БольшеЧемВерсия  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число - больше 0, если ЭтаВерсия > БольшеЧемВерсия; 
//      0, если версии равны.
//      число меньше 0, если ЭтаВерсия < БольшеЧемВерсия.
//
Функция СравнитьВерсии(Знач ЭтаВерсия, Знач БольшеЧемВерсия) Экспорт
	
	Ожидаем.Что(ЭтаВерсия).ИмеетТип("Строка");
    Ожидаем.Что(БольшеЧемВерсия).ИмеетТип("Строка");
	
	компонентыЭтойВерсии = МассивКомпонентВерсии( ЭтаВерсия );
	компонентыДругойВерсии = МассивКомпонентВерсии( БольшеЧемВерсия );

	// Выравниваем количество компонент

	вГраница = Макс( компонентыЭтойВерсии.Количество(), компонентыДругойВерсии.Количество() ) - 1;

	Для ц = компонентыЭтойВерсии.Количество() - 1 По ВГраница Цикл
		компонентыЭтойВерсии.Добавить(0);
	КонецЦикла;

	Для ц = компонентыДругойВерсии.Количество() - 1 По ВГраница Цикл
		компонентыДругойВерсии.Добавить(0);
	КонецЦикла;

	результат = 0;

	Для ц = 0 По вГраница Цикл

		Если компонентыЭтойВерсии[ц] > компонентыДругойВерсии[ц] Тогда
			результат = 1;
			Прервать;
		ИначеЕсли компонентыЭтойВерсии[ц] < компонентыДругойВерсии[ц] Тогда
			результат = -1;
			Прервать;
        КонецЕсли;

	КонецЦикла;

	Возврат результат;

КонецФункции

// Получить имя лога продукта
//
// Возвращаемое значение:
//  Строка   - имя лога продукта
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.lib.ibcmdrunner";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ВыполнитьКоманду
//      Выполняет команды утилиты ibcmd
//
// Параметры:
//   УстановленныйКодВозврата - Число - Правильный код возврата команды
//          или Массив чисел, правильных кодов возврата
// Возвращаемое значение:
//   Строка - результат выполнения команды на кластере 1С
//
Функция ВыполнитьКоманду(УстановленныйКодВозврата = 0)
	
    Если ТипЗнч(УстановленныйКодВозврата) = Тип("Массив") Тогда
		УспешныеКодыВозврата = УстановленныйКодВозврата;
	Иначе
		УспешныеКодыВозврата = Новый Массив;
		УспешныеКодыВозврата.Добавить(УстановленныйКодВозврата);
	КонецЕсли;

	КомандаВыполнения = ПутьКПриложению;
	
	Команда = Новый Команда();
    Команда.УстановитьПеременныеСреды(Новый Соответствие);
    Команда.УстановитьПеременныеСреды(ПеременныеСредыКоманды);
	Команда.УстановитьКоманду(КомандаВыполнения);
	Команда.ДобавитьПараметры(ПараметрыЗапуска);
	Команда.УстановитьИсполнениеЧерезКомандыСистемы(Истина);
	Команда.УстановитьКодировкуВывода(КодировкаТекста.UTF8);

	КодВозврата = Команда.Исполнить();

	Если УспешныеКодыВозврата.Найти(КодВозврата) = Неопределено Тогда
		ВызватьИсключение Команда.ПолучитьВывод();
	КонецЕсли;

	Возврат Команда.ПолучитьВывод();
	
КонецФункции

// Начать заполнение параметров запуска.
// Обеспечивает правильный порядок заполнения параметров команды.
// Параметры:
//  СтрокаКоманды - Строка - представление подкоманды пакетного запуска
Процедура НачатьЗаполнениеПараметровЗапуска(СтрокаКоманды)

    ПараметрыЗапуска.Очистить();
    ПараметрыЗапуска.Добавить(СтрокаКоманды);
    ДобавитьОбщиеПараметрыИБ();

КонецПроцедуры    

// Обернуть строку в кавычки, если это не сделано ранее
// Параметры:
//  Строка - Строка - исходная строка.
// Возвращаемое значение:
//  - Строка - обернутая в кавычки строка
Функция ОбернутьВКавычки(Знач Строка)
    
    Если Сред(Строка,1,1) = """" И 
        Сред(Строка, СтрДлина(Строка), 1) = """" Тогда
        Результат = Строка;
    Иначе    
	    Результат = """" + Строка + """";
    КонецЕсли;    

	Возврат Результат;

КонецФункции

// Добавить параметры ИБ и параметры авторизации
// в массив параметров запуска
Процедура ДобавитьОбщиеПараметрыИБ()

    Если ПараметрыСервернойИБ.Количество() > 0 Тогда
        Для Каждого Элемент Из ПараметрыСервернойИБ Цикл
            ПараметрыЗапуска.Добавить(Элемент);
        КонецЦикла;
    ИначеЕсли ПараметрыФайловойИБ.Количество() > 0 Тогда
        Для Каждого Элемент Из ПараметрыФайловойИБ Цикл
            ПараметрыЗапуска.Добавить(Элемент);
        КонецЦикла;
    ИначеЕсли ПараметрыКонфигурацииАС.Количество() > 0 Тогда
        Для Каждого Элемент Из ПараметрыКонфигурацииАС Цикл
            ПараметрыЗапуска.Добавить(Элемент);
        КонецЦикла;
    Иначе    
        ВызватьИсключение "Необходимо установить общие параметры информационной базы!";                
    КонецЕсли;

    Если ПараметрыЗапуска.Найти("infobase create") = Неопределено Тогда
        Если ПараметрыАвторизацииИБ.Количество() > 0 Тогда
            Для каждого Элемент Из ПараметрыАвторизацииИБ Цикл
                ПараметрыЗапуска.Добавить(Элемент);
            КонецЦикла;
        КонецЕсли;
    КонецЕсли;

    Если ПараметрыАвтономногоСервера.Количество() > 0 Тогда
        Для каждого Элемент Из ПараметрыАвтономногоСервера Цикл
            ПараметрыЗапуска.Добавить(Элемент);
        КонецЦикла;
    КонецЕсли;    

КонецПроцедуры    

// Раскладывает строку с версией на компоненты
// Параметры:
//  пВерсия - Строка - Версия
// Возвращаемое значение:
//   Массив - массив чисел
//
Функция МассивКомпонентВерсии( Знач пВерсия )

	// Убираем все пробелы. Считаем "1  002" = 1002

	регулярноеВыражение = Новый РегулярноеВыражение( "\s" );
	строкаБезПробелов = регулярноеВыражение.Заменить( пВерсия, "" );

	// Вырезаем все числа. Считаем, что любой разделитель является именно
    // разделителем между компонентами, а не дробным числом, например
	регулярноеВыражение = Новый РегулярноеВыражение( "(\d+)" );

	массивСовпадений = регулярноеВыражение.НайтиСовпадения( строкаБезПробелов );

	массивКомпонент = Новый Массив;
//          !!! Следующие параметры при версии платформы < 8.3.21 игнорируются !!!
//  ВАрхив - Булево - выгьружать в zip-архив XML-файлов. Параметр КаталогВыгрузки должен быть именем файла.
//  НаСервере - Булево - если Истина, то выгружать на сервере.
//  КоличествоПотоков - Число - количество потоков выгрузки. По умолчанию будет создано количество потоков, 
//          по количеству ядер процессоров.
	Для каждого цЭлемент Из массивСовпадений Цикл
		массивКомпонент.Добавить( Число( цЭлемент.Значение ) );
	КонецЦикла;

	Возврат массивКомпонент;

КонецФункции

// Для значения типа Булево возвращает yes или no
// Параметры:
//  Значение - Булево - значение
// Возвращаемое значение:
//  Строка - yes или no
//
Функция БулевоВСтроку(Значение)
    Ожидаем.Что(Значение).ИмеетТип("Булево");
    Рез = "no";
    Если Значение Тогда
        Рез = "yes";
    КонецЕсли;
    Возврат Рез;    
КонецФункции    

// Для строки yes или no возвращает Булево
// Параметры:
//  Значение - Строка - значение
// Возвращаемое значение:
//  Булево
//
Функция СтрокаВБулево(Значение)
    Ожидаем.Что(Значение).ИмеетТип("Строка");
    Результат = Ложь;
    Если Значение = "yes" Тогда
        Результат = Истина;
    ИначеЕсли Значение = "no" Тогда
        Результат = Ложь;
    Иначе
        ВызватьИсключение "Значение для преобразования в тип Булево должно быть только 'yes' или 'no'";
    КонецЕсли;
    Возврат Результат;    
КонецФункции

// Проверяет, что переданная строка удовлетворяет требованиям для имен 1С
// Параметры:
//  Стр - Строка - проверяемая строка
// Возвращаемое значение:
//  Булево - удовлетворяет требованиям к именам 1С или нет
//
Функция ЯвляетсяИменем(Стр)
    
    Рез = Истина;
    РазрешенныйПервыйСимвол = "_абвгдеёжзийклмнопрстуфхцчшщьыъэюяabcdefghijklmnopqrstuvwxyz";
    РазрешенныйСимвол = "_абвгдеёжзийклмнопрстуфхцчшщьыъэюяabcdefghijklmnopqrstuvwxyz0123456789";
    ДлинаСтр = СтрДлина(Стр);
    Если ДлинаСтр = 0 Тогда 
        Рез = Ложь;
    КонецЕсли;    
    Для ъ = 1 По ДлинаСтр Цикл
        Симв = НРег(Сред(Стр, ъ, 1));
        Если ъ = 1 Тогда
            Если СтрНайти(РазрешенныйПервыйСимвол, Симв) = 0 Тогда
                Рез = Ложь;
                Прервать;
            КонецЕсли; 
        Иначе
            Если СтрНайти(РазрешенныйСимвол, Симв) = 0 Тогда
                Рез = Ложь;
                Прервать;
            КонецЕсли;        
        КонецЕсли;    
    КонецЦикла;   
    Возврат Рез; 

КонецФункции    

// Добавить параметр запуска, если заполнено его значение
// Параметры:
//  ИмяПараметра - Строка - Имя добавляемого параметра;
//  ЗначениеПараметра - Строка - Значение добавляемого параметра;
//  ЗначениеПоУмолчанию - Любой - Значение по умолчанию добавляемого параметра;
//
Процедура ДобавитьПараметрЕслиЗаполнен(
    Знач ИмяПараметра,
    Знач ЗначениеПараметра,
    Знач ЗначениеПоУмолчанию = Неопределено)
    Ожидаем.Что(ИмяПараметра).ИмеетТип("Строка");
    Если ЗначениеПараметра <> ЗначениеПоУмолчанию Тогда
        Ожидаем.Что(ЗначениеПараметра).ИмеетТип("Строка");
        Параметр = ИмяПараметра + "=%1";
        ПараметрыЗапуска.Добавить(СтрШаблон(Параметр, ЗначениеПараметра));
    КонецЕсли;    
КонецПроцедуры   

Функция ШаблонПеременнойСреды(ИмяПеременной)

    Если ЭтоWindows Тогда
        Возврат СтрШаблон("%%%1%%", ИмяПеременной);
    Иначе
        Возврат СтрШаблон("$%1", ИмяПеременной);
    КонецЕсли;

КонецФункции

// Инициализация работы библиотеки.
// Задает минимальные настройки.
//
Процедура ПриСозданииОбъекта(ВерсияПлатформы = "8.3", Разрядность = Неопределено)

    Лог = Логирование.ПолучитьЛог(ИмяЛога());

    СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;

	ПараметрыЗапуска = Новый Массив;
    ПараметрыСервернойИБ = Новый Массив;
    ПараметрыФайловойИБ = Новый Массив;
    ПараметрыАвторизацииИБ = Новый Массив;
    ПараметрыКонфигурацииАС = Новый Массив;
    ПараметрыАвтономногоСервера = Новый Массив;
    ПеременныеСредыКоманды = Новый Соответствие;

    ПутьКПриложению = Платформа1С.ПутьКIBCMD(ВерсияПлатформы, Разрядность);

    Если Не ЗначениеЗаполнено(ПутьКПриложению) Тогда
        ВызватьИсключение "Приложение ibcmd не обнаружено!";
    КонецЕсли;
    
    Версия();
КонецПроцедуры

Функция НовыйОписаниеРасширения()

    ОписаниеРасширения = Новый Соответствие();
    
    ОписаниеРасширения.Вставить("version", "");
    ОписаниеРасширения.Вставить("active", Ложь);
    ОписаниеРасширения.Вставить("purpose", "");
    ОписаниеРасширения.Вставить("safe-mode", Ложь);
    ОписаниеРасширения.Вставить("security-profile-name", "");
    ОписаниеРасширения.Вставить("unsafe-action-protection", Ложь);
    ОписаниеРасширения.Вставить("used-in-distributed-infobase", Ложь);
    ОписаниеРасширения.Вставить("scope", "");
    ОписаниеРасширения.Вставить("hash-sum", "");

    Возврат ОписаниеРасширения;

КонецФункции

#КонецОбласти
